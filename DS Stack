// creating stack
#include <stdio.h>
#include <stdlib.h>

// Define the maximum size  of the stack

#define MAX_SIZE 100

// Define the stack structure

struct Stack {
    int data[MAX_SIZE];
    int top;
};

// Function to initialize the stack

void initializeStack(struct Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is empty

int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

// Function to check if the stack is full

int isFull(struct Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(struct Stack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack overflow: Cannot push element onto a full stack.\n");
        return;
    }

    stack->data[++stack->top] = value;
}

// Function to pop an element from the stack
int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow: Cannot pop element from an empty stack.\n");
        return -1; // Return a special value to indicate an error
    }

    return stack->data[stack->top--];
}

// Function to get the top element of the stack without popping it
int peek(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
        return -1; // Return a special value to indicate an error
    }

    return stack->data[stack->top];
}

int main() {
    // Create and initialize a stack
    struct Stack myStack;
    initializeStack(&myStack);

    // Push some elements onto the stack
    push(&myStack, 10);
    push(&myStack, 20);
    push(&myStack, 30);

    // Print the top element
    printf("Top element: %d\n", peek(&myStack));

    // Pop an element
    int poppedElement = pop(&myStack);
    printf("Popped element: %d\n", poppedElement);

    // Print the top element after popping
    printf("Top element after popping: %d\n", peek(&myStack));

    return 0;
}
